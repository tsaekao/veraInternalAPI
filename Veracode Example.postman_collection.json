{
	"info": {
		"_postman_id": "5063f89b-8127-49b9-a6e6-fd83a4ed89e5",
		"name": "Veracode Example",
		"description": "This is an example suite of API calls for the Veracode REST APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13366636",
		"_collection_link": "https://veracodeapis.postman.co/workspace/Veracode-Postman-Collection~4530d0e1-2101-4dab-9f8b-3631af50ff77/collection/13366636-5063f89b-8127-49b9-a6e6-fd83a4ed89e5?action=share&creator=13366636&source=collection_link"
	},
	"item": [
		{
			"name": "Self",
			"request": {
				"method": "GET",
				"url": {
					"raw": "{{base_url}}/api/authn/v2/users/self",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"authn",
						"v2",
						"users",
						"self"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users (with increased size param)",
			"request": {
				"method": "GET",
				"url": {
					"raw": "{{admin_base_url}}/users?size=160",
					"host": [
						"{{admin_base_url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "size",
							"value": "160"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add User",
			"request": {
				"method": "POST",
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email_address\": \"zbrannigan@doop.gov\",\n    \"user_name\": \"zbrannigan@doop.gov\",\n    \"first_name\": \"Zapp\",\n    \"last_name\": \"Brannigan\",\n    \"ipRestricted\": false,\n    \"active\": true,\n    \"roles\": [\n        {\n            \"role_name\": \"greenlightideuser\"\n        },\n        {\n            \"role_name\": \"extreviewer\"\n        },\n        {\n            \"role_name\": \"sandboxuser\"\n        },\n        {\n            \"role_name\": \"securityLabsUser\"\n        },\n        {\n            \"role_name\": \"extsubmitter\"\n        },\n        {\n            \"role_name\": \"extsubmitanyscan\"\n        }\n    ],\n\t\t\"teams\": [\n\t\t\t\t{\n\t\t\t\t\t\"team_name\": \"Democratic Order of PLanets\"\n\t\t\t\t}\n\t\t],\n    \"userType\": \"VOSP\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/authn/v2/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"authn",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add User From External File (import JSON/CSV into runner)",
			"request": {
				"method": "POST",
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email_address\": \"{{email_address}}\",\n\t\"user_name\": \"{{email_address}}\",\n    \"first_name\": \"{{first_name}}\",\n    \"last_name\": \"{{last_name}}\",\n    \"ipRestricted\": false,\n    \"active\": true,\n    \"roles\": [\n        {\n            \"role_name\": \"greenlightideuser\"\n        },\n        {\n            \"role_name\": \"extreviewer\"\n        },\n        {\n            \"role_name\": \"sandboxuser\"\n        },\n        {\n            \"role_name\": \"securityLabsUser\"\n        },\n        {\n            \"role_name\": \"extsubmitter\"\n        },\n        {\n            \"role_name\": \"extsubmitanyscan\"\n        }\n    ],\n\t\t\"teams\": [\n\t\t\t\t{\n\t\t\t\t\t\"team_name\": \"{{team_name}}\"\n\t\t\t\t}\n\t\t],\n    \"userType\": \"VOSP\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/authn/v2/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"authn",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Applications",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "digest",
					"digest": [
						{
							"key": "algorithm",
							"value": "MD5",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"url": {
					"raw": "{{base_url}}/appsec/v1/applications",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"appsec",
						"v1",
						"applications"
					]
				},
				"description": "GET Applications no parameters"
			},
			"response": []
		},
		{
			"name": "Applications Search",
			"request": {
				"method": "GET",
				"url": {
					"raw": "{{base_url}}/appsec/v1/applications",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"appsec",
						"v1",
						"applications"
					]
				},
				"description": "GET Applications no parameters"
			},
			"response": []
		},
		{
			"name": "All Static Findings",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const app_guid = pm.collectionVariables.get('app_guid');",
							"if (!app_guid) {",
							"    throw new Error(\"Environment does not have an 'app_guid'. Please ensure you have configured an app_guid in the Collection Variables.\");",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"url": {
					"raw": "{{base_url}}/appsec/v2/applications/{{app_guid}}/findings?scan_type=STATIC",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"appsec",
						"v2",
						"applications",
						"{{app_guid}}",
						"findings"
					],
					"query": [
						{
							"key": "scan_type",
							"value": "STATIC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "All SCA Findings",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const app_guid = pm.collectionVariables.get('app_guid');",
							"if (!app_guid) {",
							"    throw new Error(\"Environment does not have an 'app_guid'. Please ensure you have configured an app_guid in the Collection Variables.\");",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"url": {
					"raw": "{{base_url}}/appsec/v2/applications/{{app_guid}}/findings?scan_type=SCA",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"appsec",
						"v2",
						"applications",
						"{{app_guid}}",
						"findings"
					],
					"query": [
						{
							"key": "scan_type",
							"value": "SCA"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "digest",
		"digest": [
			{
				"key": "algorithm",
				"value": "MD5",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/*jshint esversion: 6 */",
					"",
					"var url = require('url');",
					"",
					"/* set Veracode API credentials in api_id and api_key in environment*/",
					"const id = pm.environment.get('api_id');",
					"if (!id) {",
					"    throw new Error(\"Environment does not have an 'api_id'. Please ensure you have configured a Veracode environment.\");",
					"}",
					"const key = pm.environment.get('api_key');",
					"if (!id) {",
					"    throw new Error(\"Environment does not have an 'api_key'. Please ensure you have configured a Veracode environment.\");",
					"}",
					"",
					"const authorizationScheme = 'VERACODE-HMAC-SHA-256';",
					"const requestVersion = \"vcode_request_version_1\";",
					"const nonceSize = 16;",
					"",
					"function computeHashHex(message, key_hex) {",
					"    return CryptoJS.HmacSHA256(message, CryptoJS.enc.Hex.parse(key_hex)).toString(CryptoJS.enc.Hex);",
					"}",
					"",
					"function calculateDataSignature(apikey, nonceBytes, dateStamp, data) {",
					"    let kNonce = computeHashHex(nonceBytes, apikey);",
					"    let kDate = computeHashHex(dateStamp, kNonce);",
					"    let kSig = computeHashHex(requestVersion, kDate);",
					"    return computeHashHex(data, kSig);",
					"}",
					"",
					"function newNonce() {",
					"    return CryptoJS.lib.WordArray.random(nonceSize).toString().toUpperCase();",
					"}",
					"",
					"function toHexBinary(input) {",
					"    return CryptoJS.enc.Hex.stringify(CryptoJS.enc.Utf8.parse(input));",
					"}",
					"",
					"function removePrefixFromApiCredential(input) {",
					"    return input.split('-').at(-1);",
					"}",
					"",
					"function calculateVeracodeAuthHeader(httpMethod, requestUrl) {",
					"    const formattedId = removePrefixFromApiCredential(id);",
					"    const formattedKey = removePrefixFromApiCredential(key);",
					"",
					"    let parsedUrl = url.parse(requestUrl);",
					"    let data = `id=${formattedId}&host=${parsedUrl.hostname}&url=${parsedUrl.path}&method=${httpMethod}`;",
					"    let dateStamp = Date.now().toString();",
					"    let nonceBytes = newNonce();",
					"    let dataSignature = calculateDataSignature(formattedKey, nonceBytes, dateStamp, data);",
					"    let authorizationParam = `id=${formattedId},ts=${dateStamp},nonce=${toHexBinary(nonceBytes)},sig=${dataSignature}`;",
					"    return authorizationScheme + \" \" + authorizationParam;",
					"}",
					"",					
					"var {Property} = require('postman-collection');",
					"const substitutedUrl = Property.replaceSubstitutions(request.url, pm.variables.toObject());",
					"postman.setEnvironmentVariable('hmacAuthHeader', calculateVeracodeAuthHeader(request.method, substitutedUrl));",
					"",
					"let hmac = calculateVeracodeAuthHeader(pm.request.method, substitutedUrl);",
					"pm.request.headers.add({",
					"  key: 'Authorization', ",
					"  value: hmac ",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://api.veracode.com"
		},
		{
			"key": "admin_base_url",
			"value": "https://api.veracode.com/api/authn/v2"
		},
		{
			"key": "findings_base_url",
			"value": "https://api.veracode.com/appsec/v1"
		},
		{
			"key": "app_guid",
			"value": "",
			"type": "string"
		}
	]
}